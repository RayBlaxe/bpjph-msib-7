### Type definitions saved at 2023-01-12T15:38:58.678Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
  locales: [String]
  defaultLocale: String
  siteURL: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean
  duotone: DuotoneGradient
  rotate: Int
  trim: Float
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(mimeTypes: [], types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat, toFormatBase64: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat
    toFormatBase64: ImageFormat
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int
    trim: Float
    sizes: String

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, base64: Boolean, traceSVG: Potrace, toFormat: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpResize
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["STRAPI__COMPONENT_SHARED_RICH_TEXT_BODY_TEXTNODE"]) @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type MarkdownRemarkFrontmatter {
  title: String
}

type STRAPI__MEDIA implements Node @dontInfer {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI__MEDIAFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
  strapi_id: Int
}

type STRAPI__MEDIAFormats {
  small: STRAPI__MEDIAFormatsSmall
  medium: STRAPI__MEDIAFormatsMedium
  thumbnail: STRAPI__MEDIAFormatsThumbnail
  large: STRAPI__MEDIAFormatsLarge
}

type STRAPI__MEDIAFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__MEDIAFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__MEDIAFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__MEDIAFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_SHARED_YOUTUBE implements Node @dontInfer {
  strapi_component: String
  url: String
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_SLIDER implements Node @dontInfer {
  strapi_component: String
  files: [STRAPI__MEDIA] @link(by: "id", from: "files___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_SEO implements Node @dontInfer {
  metaTitle: String
  metaDescription: String
  shareImage: STRAPI__MEDIA @link(by: "id", from: "shareImage___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_RICH_TEXT_BODY_TEXTNODE implements Node @childOf(mimeTypes: [], types: ["STRAPI__COMPONENT_SHARED_RICH_TEXT"]) @dontInfer {
  body: String
}

type STRAPI__COMPONENT_SHARED_RICH_TEXT implements Node @dontInfer {
  strapi_component: String
  body: STRAPI__COMPONENT_SHARED_RICH_TEXTBody
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_RICH_TEXTBody {
  data: STRAPI__COMPONENT_SHARED_RICH_TEXT_BODY_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_SHARED_QUOTE implements Node @dontInfer {
  strapi_component: String
  title: String
  body: String
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_MEDIA implements Node @dontInfer {
  strapi_component: String
  file: STRAPI__MEDIA @link(by: "id", from: "file___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_GRID_MEDIA implements Node @dontInfer {
  strapi_component: String
  images: [STRAPI__MEDIA] @link(by: "id", from: "images___NODE")
  strapi_id: Int
}

type STRAPI_SERVICE implements Node @dontInfer {
  judul: String
  deskripsi: String
  active: Boolean
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  locale: String
  localizations: STRAPI_SERVICELocalizations
  strapi_id: Int
  icon: STRAPI__MEDIA @link(by: "id", from: "icon___NODE")
}

type STRAPI_SERVICELocalizations {
  data: [STRAPI_SERVICELocalizationsData]
}

type STRAPI_SERVICELocalizationsData {
  id: Int
  attributes: STRAPI_SERVICELocalizationsDataAttributes
}

type STRAPI_SERVICELocalizationsDataAttributes {
  judul: String
  deskripsi: String
  active: Boolean
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  locale: String
}

type STRAPI_INFOGRAPHIC implements Node @dontInfer {
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  locale: String
  strapi_id: Int
}

type STRAPI_GLOBAL implements Node @dontInfer {
  siteName: String
  siteDescription: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  favicon: STRAPI__MEDIA @link(by: "id", from: "favicon___NODE")
  defaultSeo: STRAPI__COMPONENT_SHARED_SEO @link(by: "id", from: "defaultSeo___NODE")
  strapi_id: Int
}

type STRAPI_CONTACT implements Node @dontInfer {
  instagram: String
  whatsapp: String
  phone: String
  facebook: String
  twitter: String
  email: String
  youtube: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  strapi_id: Int
}

type STRAPI_CATEGORY implements Node @dontInfer {
  name: String
  slug: String
  description: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  url: String
  locale: String
  order: Int
  showInMenu: Boolean
  showInHomePage: Boolean
  section: Int
  localizations: STRAPI_CATEGORYLocalizations
  articles: [STRAPI_ARTICLE] @link(by: "id", from: "articles___NODE")
  strapi_id: Int
}

type STRAPI_CATEGORYLocalizations {
  data: [STRAPI_CATEGORYLocalizationsData]
}

type STRAPI_CATEGORYLocalizationsData {
  id: Int
  attributes: STRAPI_CATEGORYLocalizationsDataAttributes
}

type STRAPI_CATEGORYLocalizationsDataAttributes {
  name: String
  slug: String
  description: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  url: String
  locale: String
  order: Int
  showInMenu: Boolean
  showInHomePage: Boolean
  section: Int
}

type STRAPI_ARTICLE implements Node @dontInfer {
  title: String
  url: String
  description: String
  slug: String
  date: Date @dateformat
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  template: String
  showInMenu: Boolean
  locale: String
  localizations: STRAPI_ARTICLELocalizations
  strapi_id: Int
  category: STRAPI_CATEGORY @link(by: "id", from: "category___NODE")
  blocks: [STRAPI__COMPONENT_SHARED_GRID_MEDIASTRAPI__COMPONENT_SHARED_MEDIASTRAPI__COMPONENT_SHARED_QUOTESTRAPI__COMPONENT_SHARED_RICH_TEXTSTRAPI__COMPONENT_SHARED_SLIDERSTRAPI__COMPONENT_SHARED_YOUTUBEUnion] @link(by: "id", from: "blocks___NODE")
  cover: STRAPI__MEDIA @link(by: "id", from: "cover___NODE")
  author: STRAPI_AUTHOR @link(by: "id", from: "author___NODE")
}

type STRAPI_ARTICLELocalizations {
  data: [STRAPI_ARTICLELocalizationsData]
}

type STRAPI_ARTICLELocalizationsData {
  id: Int
  attributes: STRAPI_ARTICLELocalizationsDataAttributes
}

type STRAPI_ARTICLELocalizationsDataAttributes {
  title: String
  description: String
  slug: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  template: String
  showInMenu: Boolean
  locale: String
  cover: STRAPI_ARTICLELocalizationsDataAttributesCover
  author: STRAPI_ARTICLELocalizationsDataAttributesAuthor
  category: STRAPI_ARTICLELocalizationsDataAttributesCategory
  blocks: [STRAPI_ARTICLELocalizationsDataAttributesBlocks]
  localizations: STRAPI_ARTICLELocalizationsDataAttributesLocalizations
}

type STRAPI_ARTICLELocalizationsDataAttributesCover {
  data: STRAPI_ARTICLELocalizationsDataAttributesCoverData
}

type STRAPI_ARTICLELocalizationsDataAttributesCoverData {
  id: Int
  attributes: STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributes
}

type STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributes {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormats {
  large: STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormatsLarge
  small: STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormatsSmall
  medium: STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormatsMedium
  thumbnail: STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormatsThumbnail
}

type STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_ARTICLELocalizationsDataAttributesCoverDataAttributesFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_ARTICLELocalizationsDataAttributesAuthor {
  data: STRAPI_ARTICLELocalizationsDataAttributesAuthorData
}

type STRAPI_ARTICLELocalizationsDataAttributesAuthorData {
  id: Int
  attributes: STRAPI_ARTICLELocalizationsDataAttributesAuthorDataAttributes
}

type STRAPI_ARTICLELocalizationsDataAttributesAuthorDataAttributes {
  name: String
  email: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_ARTICLELocalizationsDataAttributesCategory {
  data: STRAPI_ARTICLELocalizationsDataAttributesCategoryData
}

type STRAPI_ARTICLELocalizationsDataAttributesCategoryData {
  id: Int
  attributes: STRAPI_ARTICLELocalizationsDataAttributesCategoryDataAttributes
}

type STRAPI_ARTICLELocalizationsDataAttributesCategoryDataAttributes {
  name: String
  slug: String
  description: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  url: String
  locale: String
  order: Int
  showInMenu: Boolean
  showInHomePage: Boolean
  section: Int
}

type STRAPI_ARTICLELocalizationsDataAttributesBlocks {
  id: Int
  _xcomponent: String @proxy(from: "__component", fromNode: false)
  body: String
  title: String
  url: String
}

type STRAPI_ARTICLELocalizationsDataAttributesLocalizations {
  data: [STRAPI_ARTICLELocalizationsDataAttributesLocalizationsData]
}

type STRAPI_ARTICLELocalizationsDataAttributesLocalizationsData {
  id: Int
  attributes: STRAPI_ARTICLELocalizationsDataAttributesLocalizationsDataAttributes
}

type STRAPI_ARTICLELocalizationsDataAttributesLocalizationsDataAttributes {
  title: String
  description: String
  slug: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  template: String
  showInMenu: Boolean
  locale: String
}

union STRAPI__COMPONENT_SHARED_GRID_MEDIASTRAPI__COMPONENT_SHARED_MEDIASTRAPI__COMPONENT_SHARED_QUOTESTRAPI__COMPONENT_SHARED_RICH_TEXTSTRAPI__COMPONENT_SHARED_SLIDERSTRAPI__COMPONENT_SHARED_YOUTUBEUnion = STRAPI__COMPONENT_SHARED_GRID_MEDIA | STRAPI__COMPONENT_SHARED_MEDIA | STRAPI__COMPONENT_SHARED_QUOTE | STRAPI__COMPONENT_SHARED_RICH_TEXT | STRAPI__COMPONENT_SHARED_SLIDER | STRAPI__COMPONENT_SHARED_YOUTUBE

type STRAPI_AUTHOR implements Node @dontInfer {
  name: String
  email: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  avatar: STRAPI_AUTHORAvatar
  articles: [STRAPI_AUTHORArticles]
  strapi_id: Int
}

type STRAPI_AUTHORAvatar {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI_AUTHORAvatarFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_AUTHORAvatarFormats {
  large: STRAPI_AUTHORAvatarFormatsLarge
  small: STRAPI_AUTHORAvatarFormatsSmall
  medium: STRAPI_AUTHORAvatarFormatsMedium
  thumbnail: STRAPI_AUTHORAvatarFormatsThumbnail
}

type STRAPI_AUTHORAvatarFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_AUTHORAvatarFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_AUTHORAvatarFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_AUTHORAvatarFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_AUTHORArticles {
  id: Int
  title: String
  description: String
  slug: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  template: String
  showInMenu: Boolean
  locale: String
}

type STRAPI_BANNER implements Node @dontInfer {
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  locale: String
  strapi_id: Int
}

type STRAPI_ADDRESS implements Node @dontInfer {
  address: String
  latitude: String
  longitude: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  strapi_id: Int
}